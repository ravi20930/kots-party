Folder Structure
--------------------------------------------------
src/
    types/
        next-auth.d.ts
    app/
        favicon.ico
        layout.tsx
        page.tsx
        globals.css
        host/
            page.tsx
        party/
            [id]/
                page.tsx
        api/
            parties/
                route.ts
        fonts/
            GeistMonoVF.woff
            GeistVF.woff
    components/
        RSVPForm.tsx
        SessionProvider.tsx
        HostPartyForm.tsx
        ClientLayout.tsx
    lib/
        prisma.ts
        utils.ts
        supabase.ts
        auth.ts


File Contents
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/types/next-auth.d.ts
File type: .ts
import "next-auth";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
  }
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/app/layout.tsx
File type: .tsx
import "./globals.css";
import { Inter } from "next/font/google";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import ClientLayout from "@/components/ClientLayout";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "BlockParty",
  description: "Modern apartment house party app",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = await getServerSession(authOptions);

  return (
    <html lang="en">
      <body className={inter.className}>
        <ClientLayout session={session}>{children}</ClientLayout>
      </body>
    </html>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/app/page.tsx
File type: .tsx
"use client";

import Link from "next/link";
import { useEffect, useState } from "react";
import { Party } from "@prisma/client";

export default function Home() {
  const [parties, setParties] = useState<Party[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchParties = async () => {
      try {
        const response = await fetch("/api/parties");
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to fetch parties");
        }

        setParties(result.data || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Failed to load parties");
      } finally {
        setLoading(false);
      }
    };

    fetchParties();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 p-8">
        <div className="text-white">Loading...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 p-8">
        <div className="text-red-500">Error: {error}</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 p-8">
      <h1 className="text-4xl font-bold text-white">Upcoming Block Parties</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {parties.length === 0 ? (
          <div className="text-white">No parties found</div>
        ) : (
          parties.map((party) => (
            <Link href={`/party/${party.id}`} key={party.id} className="block">
              <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-lg p-6 hover:bg-opacity-20 transition duration-300">
                <h2 className="text-xl font-semibold text-white">
                  {party.name}
                </h2>
                <p className="text-gray-400 mt-2">
                  {new Date(party.date).toLocaleDateString()}
                </p>
              </div>
            </Link>
          ))
        )}
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/app/globals.css
File type: .css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/app/host/page.tsx
File type: .tsx
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { redirect } from "next/navigation";
import prisma from "@/lib/prisma";
import HostPartyForm from "@/components/HostPartyForm";

export default async function HostParty() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/api/auth/signin");
    return;
  }

  async function createParty(formData: FormData) {
    "use server";

    const name = formData.get("name") as string;
    const date = new Date(formData.get("date") as string);
    const maxGuests = parseInt(formData.get("maxGuests") as string);
    const maleRatio = parseInt(formData.get("maleRatio") as string) || null;
    const femaleRatio = parseInt(formData.get("femaleRatio") as string) || null;
    const entryType = formData.get("entryType") as string;
    const alcoholRequests = formData.get("alcoholRequests") === "on";

    if (!session) {
      throw new Error("Session is null");
    }

    await prisma.party.create({
      data: {
        name,
        date,
        maxGuests,
        maleRatio,
        femaleRatio,
        entryType,
        alcoholRequests,
        hostId: session.user!.id,
      },
    });

    redirect("/");
  }

  return <HostPartyForm createParty={createParty} />;
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/app/party/[id]/page.tsx
File type: .tsx
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { redirect } from "next/navigation";
import prisma from "@/lib/prisma";
import RSVPForm from "@/components/RSVPForm";

type PageProps = {
  params: Promise<{ id: string }>;
  searchParams?: Promise<{ [key: string]: string | string[] | undefined }>;
};

export default async function PartyDetails({
  params,
}: PageProps): Promise<JSX.Element> {
  const resolvedParams = await params;
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/api/auth/signin");
  }

  const party = await prisma.party.findUnique({
    where: { id: resolvedParams.id },
    include: {
      host: true,
      rsvps: {
        include: {
          user: true,
        },
      },
    },
  });

  if (!party) {
    return <div className="text-white">Party not found</div>;
  }

  async function createRSVP(formData: FormData) {
    "use server";

    if (!session || !party) {
      throw new Error("Unauthorized or party not found");
    }

    const alcoholRequest = formData.get("alcoholRequest") as string;
    const suggestion = formData.get("suggestion") as string;

    await prisma.rSVP.create({
      data: {
        userId: session.user.id,
        partyId: party.id,
        alcoholRequest,
        suggestion,
      },
    });

    redirect(`/party/${party.id}`);
  }

  const userRSVP = party.rsvps.find((rsvp) => rsvp.userId === session.user.id);

  return (
    <div className="max-w-2xl mx-auto bg-white bg-opacity-10 backdrop-blur-lg rounded-lg p-8">
      <h1 className="text-3xl font-bold text-white mb-6">{party.name}</h1>
      <div className="space-y-4 mb-8">
        <p className="text-white">
          <span className="font-semibold">Date:</span>{" "}
          {party.date.toLocaleDateString()}
        </p>
        <p className="text-white">
          <span className="font-semibold">Host:</span> {party.host.name}
        </p>
        <p className="text-white">
          <span className="font-semibold">Guests:</span> {party.rsvps.length}/
          {party.maxGuests}
        </p>
        <p className="text-white">
          <span className="font-semibold">Entry:</span> {party.entryType}
        </p>
        <p className="text-white">
          <span className="font-semibold">Alcohol Requests:</span>{" "}
          {party.alcoholRequests ? "Allowed" : "Not Allowed"}
        </p>
      </div>
      {userRSVP ? (
        <div className="text-white">
          <p>You have already RSVPed to this party!</p>
          {userRSVP.alcoholRequest && (
            <p>Your alcohol request: {userRSVP.alcoholRequest}</p>
          )}
          {userRSVP.suggestion && <p>Your suggestion: {userRSVP.suggestion}</p>}
        </div>
      ) : (
        <RSVPForm
          createRSVP={createRSVP}
          alcoholRequestsAllowed={party.alcoholRequests}
        />
      )}
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/app/api/parties/route.ts
File type: .ts
import { NextResponse } from "next/server";
import { PrismaClient, Prisma } from "@prisma/client";

export async function GET() {
  // Create a new client for each request
  const prisma = new PrismaClient({
    datasourceUrl: process.env.DATABASE_URL,
  });

  try {
    const parties = await prisma.party.findMany({
      include: {
        host: true,
        rsvps: true,
      },
      orderBy: {
        date: "asc",
      },
    });

    if (!parties) {
      return NextResponse.json({ error: "No parties found" }, { status: 404 });
    }

    return NextResponse.json({ data: parties });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error occurred";

    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      console.error("Prisma error:", error.code, error.message);
      return NextResponse.json(
        { error: "Database error", code: error.code },
        { status: 500 }
      );
    }

    console.error("Error fetching parties:", errorMessage);
    return NextResponse.json(
      { error: "Failed to fetch parties", details: errorMessage },
      { status: 500 }
    );
  } finally {
    // Always disconnect after the request
    await prisma.$disconnect();
  }
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/components/RSVPForm.tsx
File type: .tsx
"use client";

import { useState } from "react";

export default function RSVPForm({
  createRSVP,
  alcoholRequestsAllowed,
}: {
  createRSVP: (formData: FormData) => void;
  alcoholRequestsAllowed: boolean;
}) {
  const [rsvpDetails, setRsvpDetails] = useState({
    alcoholRequest: "",
    suggestion: "",
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setRsvpDetails((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    createRSVP(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {alcoholRequestsAllowed && (
        <div>
          <label htmlFor="alcoholRequest" className="block text-white mb-2">
            Alcohol Request (Optional)
          </label>
          <input
            type="text"
            id="alcoholRequest"
            name="alcoholRequest"
            value={rsvpDetails.alcoholRequest}
            onChange={handleChange}
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
            placeholder="Beer, Wine, etc."
          />
        </div>
      )}
      <div>
        <label htmlFor="suggestion" className="block text-white mb-2">
          Suggestion or Comment (Optional)
        </label>
        <textarea
          id="suggestion"
          name="suggestion"
          value={rsvpDetails.suggestion}
          onChange={handleChange}
          className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
          placeholder="Any ideas or comments for the party?"
        ></textarea>
      </div>
      <button
        type="submit"
        className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition duration-300"
      >
        RSVP
      </button>
    </form>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/components/SessionProvider.tsx
File type: .tsx
import { SessionProvider as NextAuthSessionProvider } from "next-auth/react"
import { Session } from "next-auth"

type SessionProviderProps = {
  children: React.ReactNode
  session: Session | null
}

export default function SessionProvider({ children, session }: SessionProviderProps) {
  return (
    <NextAuthSessionProvider session={session}>
      {children}
    </NextAuthSessionProvider>
  )
}



--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/components/HostPartyForm.tsx
File type: .tsx
'use client'

import { useState } from 'react'

export default function HostPartyForm({ createParty }: { createParty: (formData: FormData) => void }) {
  const [partyDetails, setPartyDetails] = useState({
    name: '',
    date: '',
    maxGuests: '',
    maleRatio: '',
    femaleRatio: '',
    entryType: 'free',
    alcoholRequests: false,
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target
    setPartyDetails(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }))
  }

  return (
    <div className="max-w-2xl mx-auto bg-white bg-opacity-10 backdrop-blur-lg rounded-lg p-8">
      <h1 className="text-3xl font-bold text-white mb-6">Host a Block Party</h1>
      <form action={createParty} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-white mb-2">Party Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={partyDetails.name}
            onChange={handleChange}
            required
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
            placeholder="Summer Rooftop Bash"
          />
        </div>
        <div>
          <label htmlFor="date" className="block text-white mb-2">Date</label>
          <input
            type="date"
            id="date"
            name="date"
            value={partyDetails.date}
            onChange={handleChange}
            required
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
          />
        </div>
        <div>
          <label htmlFor="maxGuests" className="block text-white mb-2">Max Guests</label>
          <input
            type="number"
            id="maxGuests"
            name="maxGuests"
            value={partyDetails.maxGuests}
            onChange={handleChange}
            required
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
            placeholder="30"
          />
        </div>
        <div>
          <label htmlFor="maleRatio" className="block text-white mb-2">Male Ratio (%)</label>
          <input
            type="number"
            id="maleRatio"
            name="maleRatio"
            value={partyDetails.maleRatio}
            onChange={handleChange}
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
            placeholder="50"
          />
        </div>
        <div>
          <label htmlFor="femaleRatio" className="block text-white mb-2">Female Ratio (%)</label>
          <input
            type="number"
            id="femaleRatio"
            name="femaleRatio"
            value={partyDetails.femaleRatio}
            onChange={handleChange}
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white placeholder-gray-300"
            placeholder="50"
          />
        </div>
        <div>
          <label htmlFor="entryType" className="block text-white mb-2">Entry Type</label>
          <select
            id="entryType"
            name="entryType"
            value={partyDetails.entryType}
            onChange={handleChange}
            className="w-full px-3 py-2 bg-white bg-opacity-20 rounded-md text-white"
          >
            <option value="free">Free</option>
            <option value="byob">Bring Your Own Booze</option>
            <option value="donation">Optional Donation</option>
          </select>
        </div>
        <div>
          <label className="flex items-center text-white">
            <input
              type="checkbox"
              name="alcoholRequests"
              checked={partyDetails.alcoholRequests}
              onChange={handleChange}
              className="mr-2"
            />
            Allow Alcohol Requests
          </label>
        </div>
        <button type="submit" className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition duration-300">
          Create Party
        </button>
      </form>
    </div>
  )
}



--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/components/ClientLayout.tsx
File type: .tsx
"use client";

import { Session } from "next-auth";

interface ClientLayoutProps {
  children: React.ReactNode;
  session: Session | null;
}

export default function ClientLayout({ children, session }: ClientLayoutProps) {
  return (
    <div>
      {session && <div>Logged in as {session.user?.name}</div>}
      {children}
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/lib/prisma.ts
File type: .ts
import { PrismaClient } from "@prisma/client";

// In development, don't try to reuse connections
const prisma = new PrismaClient({
  log: ["error", "warn"],
  datasourceUrl: process.env.DATABASE_URL,
});

export default prisma;


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/lib/utils.ts
File type: .ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/lib/supabase.ts
File type: .ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey)



--------------------------------------------------
File End
--------------------------------------------------


/Users/ravi/Documents/weedlabs/kots-party/src/lib/auth.ts
File type: .ts
import { NextAuthOptions } from "next-auth"
import GoogleProvider from "next-auth/providers/google"
import { PrismaAdapter } from "@next-auth/prisma-adapter"
import prisma from "./prisma"

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    session: async ({ session, user }) => {
      if (session?.user) {
        session.user.id = user.id
      }
      return session
    },
  },
}



--------------------------------------------------
File End
--------------------------------------------------
