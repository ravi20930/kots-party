datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  parties       Party[]
  attendances   Attendee[]
  rsvps         RSVP[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Party {
  id           String     @id @default(cuid())
  title        String
  date         DateTime
  maxAttendees Int
  flatNo       String
  hostName     String
  hostEmail    String
  isVerified   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  hostId       String
  host         User       @relation(fields: [hostId], references: [id])
  attendees    Attendee[]
  rsvps        RSVP[]
}

model Attendee {
  id             String  @id @default(cuid())
  alcoholRequest String?
  suggestion     String?
  userId         String
  partyId        String
  user           User    @relation(fields: [userId], references: [id])
  party          Party   @relation(fields: [partyId], references: [id])

  @@unique([userId, partyId])
}

model RSVP {
  id             String  @id @default(cuid())
  party          Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId        String
  user           User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail      String
  userName       String
  alcoholRequest String?
  suggestion     String?
  createdAt      DateTime @default(now())

  @@unique([partyId, userEmail])
}
