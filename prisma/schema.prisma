datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  hostedParties Party[]   @relation("HostedParties")
  rsvps         RSVP[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Party {
  id              String   @id @default(cuid())
  name            String
  date            DateTime
  maxGuests       Int
  maleRatio      Int?
  femaleRatio    Int?
  entryType       String
  alcoholRequests Boolean  @default(false)
  hostId          String
  host            User     @relation("HostedParties", fields: [hostId], references: [id])
  rsvps           RSVP[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RSVP {
  id             String   @id @default(cuid())
  userId         String
  partyId        String
  alcoholRequest String?
  suggestion     String?
  user           User     @relation(fields: [userId], references: [id])
  party          Party    @relation(fields: [partyId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, partyId])
}
